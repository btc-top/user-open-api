[{"content":"请求方式 统一使用 HTTP 请求（基于 HTTP1.0/1.1 标准）的 GET 或 POST 方法。\n安全要求 如果在公网则请求及响应数据采用 HTTPS 加密传输，内网可以使用 HTTP。\n请求格式 数据采用 JSON 格式，请注意在 HTTP 请求的 header 中设置：Content-Type: application/json。\n授权机制 client 端 在 HTTP header 中添加 Authorization 字段，其值为根据颁发的 clientId 和 secretKey 生成的 jwt token 值。\n其中 jwt token 的 playload 格式为：\n   字段 类型 描述     clientId string 从授权处获取的 clientId 编号   rnd number 为了防止重放攻击使用的随机数，不得小于 8 位   exp unix timestamp 该 jwt token 的过期时间时间戳，建议比当前时间大 3 到 5 分钟，如果对安全要求高的可以缩小范围，不建议太大了。    server 端 验证 client 端发送的 HTTP 请求中 header 里面的 Authorization 字段内容是否为合法授权的 jwt token。\n举例 client 端发送一个请求给 server，并在其 http header 中加上有效的 jwt token：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  const _ = require(\u0026#39;lodash\u0026#39;); const jwt = require(\u0026#39;jsonwebtoken\u0026#39;); const request = require(\u0026#39;request-promise-native\u0026#39;); const url = \u0026#39;http://service_url\u0026#39;; // server端api的URL地址 const clientId = \u0026#39;xxxxxxxxx\u0026#39;; // 授权处颁发的clientId const secretKey = \u0026#39;xxxxx\u0026#39;; // 授权处颁发的secretKey，注意保密  const random = _.random(1000000000, 9999999999); // 随机数 const exp = Date.now() / 1000 + 180; // 有效期180秒 const playload = { clientId: clientId, rnd: random, exp: exp }; // jwt token的playload内容  const parameters = {}; // 接口请求参数内容  const token = jwt.sign(playload, secretKey); // 产生授权jwt token  request.post(url, { headers: { Authorization: token }, // 在client的http header中设置Authorization字段，其值为前面产生的jwt token  body: parameters, json: true, }).then(function () { ...... });   接口通用说明 返回格式 返回内容统一为 JSON 格式，包括的字段如下：\n   字段 类型 描述     code int 执行结果错误码，如果执行成功，为 0，否则为对应的错误码   data any 接口返回数据内容   message string 错误信息    错误码说明 错误码对照表如下：\n   值 描述     0 执行成功   5010 输入内容无效   5020 用户身份验证失败   5030 操作失败   5040 权限不足   5050 系统错误    接口定义 1. 获取用户出账记录。 方法: GET\n接口路径: /profit/list\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户   coinType string 是 收益币种，可选值为：btc、bch   startDay string 是 开始日期，格式为：2020-02-29   endDay string 是 结束日期，格式为：2020-02-29    返回值：\n   字段 类型 描述     data array 出账记录数组    出账记录格式：\n   字段 类型 描述     day date 出账日期   total double 当天总收益    举例：\n1 2 3 4 5 6 7 8 9  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;day\u0026#34;: \u0026#34;2020-01-01\u0026#34;, \u0026#34;total\u0026#34;: 0.94418618 }, { \u0026#34;day\u0026#34;: \u0026#34;2020-01-02\u0026#34;, \u0026#34;total\u0026#34;: 0.96527115 }, { \u0026#34;day\u0026#34;: \u0026#34;2020-01-03\u0026#34;, \u0026#34;total\u0026#34;: 0.96356307 } ] }   2. 获取用户历史付款记录。 方法: GET\n接口路径: /pay/list\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户   coinType string 是 收益币种，可选值为：btc、bch   startDay string 是 开始日期，格式为：2020-02-29   endDay string 是 结束日期，格式为：2020-02-29    返回值：\n   字段 类型 描述     data array 付款记录数组    付款记录格式：\n   字段 类型 描述     day date 出账日期   amount double 付款额   address string 收款地址    举例：\n1 2 3 4 5 6 7 8 9  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;day\u0026#34;: \u0026#34;2020-01-01\u0026#34;, \u0026#34;total\u0026#34;: 0.94418618, \u0026#34;address\u0026#34;: \u0026#34;coin-address-xxxx\u0026#34; }, { \u0026#34;day\u0026#34;: \u0026#34;2020-01-02\u0026#34;, \u0026#34;total\u0026#34;: 0.96527115, \u0026#34;address\u0026#34;: \u0026#34;coin-address-xxxx\u0026#34; }, { \u0026#34;day\u0026#34;: \u0026#34;2020-01-03\u0026#34;, \u0026#34;total\u0026#34;: 0.96356307, \u0026#34;address\u0026#34;: \u0026#34;coin-address-xxxx\u0026#34; } ] }   3. 获取用户当天实时挖矿收益（未包括网络手续费收益并且未扣除矿池费用）获取。 方法: GET\n接口路径: /profit/today\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户   coinType string 是 收益币种，可选值为：btc、bch    返回值：\n   字段 类型 描述     data object 挖矿收益    挖矿收益格式：\n   字段 类型 描述     total double 总收益    举例：\n1 2 3 4 5 6 7  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: { \u0026#34;total\u0026#34;: 0.28508561 } }   4. 获取用户当前实时算力信息。 方法: GET\n接口路径: /speed/realtime\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data object 实时算力信息    实时算力信息格式：\n   字段 类型 描述     speed5m object 5 分钟算力   speed10m object 10 分钟算力   speed30m object 30 分钟算力    算力格式：\n   字段 类型 描述     validSpeed int 有效算力(H/s)   rejectRate float 拒绝率    举例：\n1 2 3 4 5 6 7 8 9  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: { \u0026#34;speed5m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24561271905291252, \u0026#34;rejectRate\u0026#34;: 0.007 }, \u0026#34;speed10m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;speed30m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 } } }   5. 获取用户最近 24 小时算力 方法: GET\n接口路径: /speed/hourly/24h\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data array 小时算力信息数组    小时算力信息格式：\n   字段 类型 描述     at datetime 时间(小时)   validSpeed int 有效算力(H/s)   rejectRate float 拒绝率    举例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 08:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24561271905291252, \u0026#34;rejectRate\u0026#34;: 0.007 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 09:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 10:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 11:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 12:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 13:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 14:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 15:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01 16:00:00\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 } ] }   6. 获取用户最近 30 天日均算力 方法: GET\n接口路径: /speed/daily/30d\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data array 日均算力信息数组    日均算力信息格式：\n   字段 类型 描述     at date 时间(天)，注意一天的起止时间是：北京时间的早 8 点到第二天早 8 点。   validSpeed int 有效算力(H/s)   rejectRate float 拒绝率    举例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;at\u0026#34;: \u0026#34;2020-01-01\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24561271905291252, \u0026#34;rejectRate\u0026#34;: 0.007 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-02\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-03\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-04\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-05\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-06\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-07\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-08\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, { \u0026#34;at\u0026#34;: \u0026#34;2020-01-09\u0026#34;, \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0 } ] }   7. 获取用户当前矿机总体情况 方法: GET\n接口路径: /worker/summary\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data object 矿机总体情况    矿机总体情况格式：\n   字段 类型 描述     running int 运行中矿机数量。   stopped int 停机矿机数量   invalid int 失效矿机数量    举例：\n1 2 3 4 5 6 7 8 9  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: { \u0026#34;running\u0026#34;: 12, \u0026#34;stopped\u0026#34;: 1, \u0026#34;invalid\u0026#34;: 0 } }   8. 获取用户矿机运行详情 方法: GET\n接口路径: /worker/list\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data array 矿机运行详细信息    矿机详细信息格式：\n   字段 类型 描述     name string 矿机名称   speed5m object 5 分钟算力   speed30m object 30 分钟算力   speed24h object 24 小时算力   status int 状态: 1-在线, 2-停机, 3-失效    算力格式：\n   字段 类型 描述     validSpeed int 有效算力(H/s)   rejectRate float 拒绝率    举例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;4x18x88\u0026#34;, \u0026#34;speed5m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24561271905291252, \u0026#34;rejectRate\u0026#34;: 0.007 }, \u0026#34;speed30m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;speed24h\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;status\u0026#34;: 1 }, { \u0026#34;name\u0026#34;: \u0026#34;4x18x89\u0026#34;, \u0026#34;speed5m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24561271905291252, \u0026#34;rejectRate\u0026#34;: 0.007 }, \u0026#34;speed30m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;speed24h\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;status\u0026#34;: 1 }, { \u0026#34;name\u0026#34;: \u0026#34;4x18x90\u0026#34;, \u0026#34;speed5m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 0, \u0026#34;rejectRate\u0026#34;: 0 }, \u0026#34;speed30m\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24388516638335084, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;speed24h\u0026#34;: { \u0026#34;validSpeed\u0026#34;: 24559043561725624, \u0026#34;rejectRate\u0026#34;: 0.001 }, \u0026#34;status\u0026#34;: 2 } ] }   9. 获取用户收款设置 方法: GET\n接口路径: /account/pay-setting\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户   coinType string 是 收益币种，可选值为：btc、bch    返回值：\n   字段 类型 描述     data object 用户收款设置    用户收款设置格式：\n   字段 类型 描述     address string 收币地址   min float 自动收币最小额度，0 表示不自动收币    举例：\n1 2 3 4 5 6 7 8  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;coin-address-xxxxx\u0026#34;, \u0026#34;min\u0026#34;: 0.001 } }   10. 获取用户所有子账户名 方法: GET\n接口路径: /account/sub-account/list\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户    返回值：\n   字段 类型 描述     data string[] 子账户名数组    举例：\n1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: [\u0026#34;account1\u0026#34;, \u0026#34;account2\u0026#34;, \u0026#34;account3\u0026#34;] }   11. 生成用户的观察链接 方法: POST\n接口路径: /observer/create\n参数：\n   字段 是否必须 类型 描述     account 否 string 子账户用户名，如果不传表示只用当前 key 关联的默认账户   rights 是 string[] 观察者具备的权限项数组，目前包括 3 个权限项：dashboard_observer、worker_observer、profit_observer   remark 否 string 观察者备注    返回值：\n   字段 类型 描述     data bool 操作是否成功    举例：\n1 2 3 4 5  { \u0026#34;code\u0026#34;: 0, \u0026#34;message\u0026#34;: null, \u0026#34;data\u0026#34;: true }   ","description":"","id":0,"section":"","tags":null,"title":"用户Open API文档","uri":"https://btc-top.github.io/user-open-api/zh-cn/"}]